pipeline {
    agent any
    environment {
        PATH = "${env.PATH}:/usr/local/bin"
        // define environment variables for Azure credentials
        TF_VAR_admin_password = credentials('admin_password')
        ARM_CLIENT_ID       = credentials('ARM_CLIENT_ID')
        ARM_CLIENT_SECRET   = credentials('ARM_CLIENT_SECRET')
        ARM_TENANT_ID       = credentials('ARM_TENANT_ID')
        ARM_SUBSCRIPTION_ID = credentials('ARM_SUBSCRIPTION_ID')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    sh 'echo "Initializing Terraform"'
                    sh 'terraform init'
                }
            }
        }
        stage('Plan') {
            steps {
                script {
                    sh 'echo "Generating Terraform plan"'
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        stage('Approval') {
            steps {
                input(message: "Review the plan and approve if it's okay to proceed", ok: "Deploy")
            }
        }
        stage('Apply') {
            steps {
                script {
                    sh 'echo "Applying Terraform plan"'
                    sh 'terraform apply -auto-approve tfplan'
                    sh 'echo "Waiting for 30 seconds before refreshing state to capture Public IP..."'
                    sh 'sleep 30'
                    script {
                        env.PUBLIC_IPS_JSON = sh(script: 'terraform output -json asa_vm_public_ips', returnStdout: true).trim()
                        echo "Debug: JSON Output - ${env.PUBLIC_IPS_JSON}"
                        def ips = readJSON(text: env.PUBLIC_IPS_JSON)
                        env.PUBLIC_IPS = ips.join(",")
                        echo "Debug: IPs - ${env.PUBLIC_IPS}"
                    }
                }
            }
        }
        stage('Terraform Output Validation') {
            steps {
                script {
                    echo "Validating Terraform outputs"
                    def vmId = sh(script: 'terraform output -json vm_id', returnStdout: true).trim()
                    if (vmId) {
                        echo "VM ID: $vmId"
                    } else {
                        error("VM ID output is missing or invalid")
                     }
                 }
            }
        }
    }
}
