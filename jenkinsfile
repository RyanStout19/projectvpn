pipeline {
    agent any
    environment {
        PATH = "${env.PATH}:/usr/local/bin"
        // Define environment variables for Azure credentials
        TF_VAR_admin_password = credentials('admin_password')
        ARM_CLIENT_ID       = credentials('ARM_CLIENT_ID')
        ARM_CLIENT_SECRET   = credentials('ARM_CLIENT_SECRET')
        ARM_TENANT_ID       = credentials('ARM_TENANT_ID')
        ARM_SUBSCRIPTION_ID = credentials('ARM_SUBSCRIPTION_ID')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    sh 'echo "Initializing Terraform"'
                    sh 'terraform init'
                }
            }
        }
        stage('Plan') {
            steps {
                script {
                    sh 'echo "Generating Terraform plan"'
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        stage('Approval') {
            steps {
                input(message: "Review the plan and approve if it's okay to proceed", ok: "Deploy")
            }
        }
        stage('Apply') {
            steps {
                script {
                    sh 'echo "Applying Terraform plan"'
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        stage('Azure Resource Verification') {
            steps {
                script {
                    echo "Verifying Azure resources"

                    // Log in to Azure CLI
                    sh """
                    az login --service-principal -u ${ARM_CLIENT_ID} -p ${ARM_CLIENT_SECRET} --tenant ${ARM_TENANT_ID}
                    az account set --subscription ${ARM_SUBSCRIPTION_ID}
                    """

                    // Retrieve resource group name from Terraform outputs
                    def resourceGroupName = "projectvpn-2"

                    // List all resources in the resource group and check the count
                    def resourceCount = sh (
                        script: """
                        az resource list --resource-group ${resourceGroupName} --query "length([])" --output tsv
                        """,
                        returnStdout: true
                    ).trim()

                    if (resourceCount == "0") {
                        error "No resources found in resource group ${resourceGroupName}."
                    } else {
                        echo "Found ${resourceCount} resources in resource group ${resourceGroupName}."
                    }
                }
            }
        }
    }
}
