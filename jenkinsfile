pipeline {
    agent any
    environment {
        PATH = "${env.PATH}:/usr/local/bin"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'admin_password', variable: 'admin_password'),
                        string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                        string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'ARM_SKIP_PROVIDER_REGISTRATION', variable: 'ARM_SKIP_PROVIDER_REGISTRATION'),
                    ]) {
                        sh 'echo "Initializing Terraform"'
                        sh 'terraform init'
                    }
                }
            }
        }
        stage('Plan') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'admin_password', variable: 'admin_password'),
                        string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                        string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'ARM_SKIP_PROVIDER_REGISTRATION', variable: 'ARM_SKIP_PROVIDER_REGISTRATION'),
                    ]) {
                        sh 'echo "Generating Terraform plan"'
                        sh 'terraform plan -out=tfplan'
                    }
                }
            }
        }
        stage('Approval') {
            steps {
                input(message: "Review the plan and approve if it's okay to proceed", ok: "Deploy")
            }
        }
        stage('Apply') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'admin_password', variable: 'admin_password'),
                        string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                        string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'ARM_SKIP_PROVIDER_REGISTRATION', variable: 'ARM_SKIP_PROVIDER_REGISTRATION'),
                    ]) {
                        sh 'echo "Applying Terraform plan"'
                        sh 'terraform apply -auto-approve tfplan'
                        sh 'echo "Waiting for 30 seconds before refreshing state to capture Public IP..."'
                        sh 'sleep 30'
                        script {
                            env.PUBLIC_IPS_JSON = sh(script: 'terraform output -json asa_vm_public_ips', returnStdout: true).trim()
                            echo "Debug: JSON Output - ${env.PUBLIC_IPS_JSON}"
                            def ips = readJSON(text: env.PUBLIC_IPS_JSON)
                            env.PUBLIC_IPS = ips.join(",")
                            echo "Debug: IPs - ${env.PUBLIC_IPS}"
                        }
                    }
                }
            }
        }
        stage('Ping Test') {
            steps {
                script {
                    sh 'sleep 120' // 2 mins
                    echo "Pinging IPs: ${env.PUBLIC_IPS}"
                    env.PUBLIC_IPS.split(',').each { ip ->
                        echo "About to ping IP: $ip"
                        sh "echo 'Pinging VM at $ip' && ping -c 1 $ip || echo 'Ping failed for IP $ip'"
                    }
                }
            }
        }
    }
}
